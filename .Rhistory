tmpDF2$count <- ifelse(tmpDF2$count == "expansion", 1, 0)
tmpDF2$count <- as.numeric(tmpDF2$count)
totDF1 <- summaryBy(LAI~Year, data=tmpDF1, na.rm=T, keep.names=T, FUN=c(mean,sd))
outDF$expansion_LAI_n[outDF$Year==2005&outDF$PFT=="IBS"] <- sum(tmpDF2$count)
outDF$expansion_LAI_mean[outDF$Year==2005&outDF$PFT=="IBS"] <- totDF1$LAI.mean
outDF$expansion_LAI_sd[outDF$Year==2005&outDF$PFT=="IBS"] <- totDF1$LAI.sd
### TeBE
pDF1 <- subset(pDF, TeBE.p == "expansion")
tmpDF1 <- pDF1[,c("Lon", "Lat", "Year.y", "TeBE.y")]
tmpDF2 <- pDF1[,c("Lon", "Lat", "Year.y", "TeBE.p")]
colnames(tmpDF1) <- c("Lon", "Lat", "Year", "LAI")
colnames(tmpDF2) <- c("Lon", "Lat", "Year", "count")
tmpDF2$count <- ifelse(tmpDF2$count == "expansion", 1, 0)
tmpDF2$count <- as.numeric(tmpDF2$count)
totDF1 <- summaryBy(LAI~Year, data=tmpDF1, na.rm=T, keep.names=T, FUN=c(mean,sd))
outDF$expansion_LAI_n[outDF$Year==2005&outDF$PFT=="TeBE"] <- sum(tmpDF2$count)
outDF$expansion_LAI_mean[outDF$Year==2005&outDF$PFT=="TeBE"] <- totDF1$LAI.mean
outDF$expansion_LAI_sd[outDF$Year==2005&outDF$PFT=="TeBE"] <- totDF1$LAI.sd
### TrBR
pDF1 <- subset(pDF, TrBR.p == "expansion")
tmpDF1 <- pDF1[,c("Lon", "Lat", "Year.y", "TrBR.y")]
tmpDF2 <- pDF1[,c("Lon", "Lat", "Year.y", "TrBR.p")]
colnames(tmpDF1) <- c("Lon", "Lat", "Year", "LAI")
colnames(tmpDF2) <- c("Lon", "Lat", "Year", "count")
tmpDF2$count <- ifelse(tmpDF2$count == "expansion", 1, 0)
tmpDF2$count <- as.numeric(tmpDF2$count)
totDF1 <- summaryBy(LAI~Year, data=tmpDF1, na.rm=T, keep.names=T, FUN=c(mean,sd))
outDF$expansion_LAI_n[outDF$Year==2005&outDF$PFT=="TrBR"] <- sum(tmpDF2$count)
outDF$expansion_LAI_mean[outDF$Year==2005&outDF$PFT=="TrBR"] <- totDF1$LAI.mean
outDF$expansion_LAI_sd[outDF$Year==2005&outDF$PFT=="TrBR"] <- totDF1$LAI.sd
### TrIBE
pDF1 <- subset(pDF, TrIBE.p == "expansion")
tmpDF1 <- pDF1[,c("Lon", "Lat", "Year.y", "TrIBE.y")]
tmpDF2 <- pDF1[,c("Lon", "Lat", "Year.y", "TrIBE.p")]
colnames(tmpDF1) <- c("Lon", "Lat", "Year", "LAI")
colnames(tmpDF2) <- c("Lon", "Lat", "Year", "count")
tmpDF2$count <- ifelse(tmpDF2$count == "expansion", 1, 0)
tmpDF2$count <- as.numeric(tmpDF2$count)
totDF1 <- summaryBy(LAI~Year, data=tmpDF1, na.rm=T, keep.names=T, FUN=c(mean,sd))
outDF$expansion_LAI_n[outDF$Year==2005&outDF$PFT=="TrIBE"] <- sum(tmpDF2$count)
outDF$expansion_LAI_mean[outDF$Year==2005&outDF$PFT=="TrIBE"] <- totDF1$LAI.mean
outDF$expansion_LAI_sd[outDF$Year==2005&outDF$PFT=="TrIBE"] <- totDF1$LAI.sd
### TrBE
pDF1 <- subset(pDF, TrBE.p == "expansion")
tmpDF1 <- pDF1[,c("Lon", "Lat", "Year.y", "TrBE.y")]
tmpDF2 <- pDF1[,c("Lon", "Lat", "Year.y", "TrBE.p")]
colnames(tmpDF1) <- c("Lon", "Lat", "Year", "LAI")
colnames(tmpDF2) <- c("Lon", "Lat", "Year", "count")
tmpDF2$count <- ifelse(tmpDF2$count == "expansion", 1, 0)
tmpDF2$count <- as.numeric(tmpDF2$count)
totDF1 <- summaryBy(LAI~Year, data=tmpDF1, na.rm=T, keep.names=T, FUN=c(mean,sd))
outDF$expansion_LAI_n[outDF$Year==2005&outDF$PFT=="TrBE"] <- sum(tmpDF2$count)
outDF$expansion_LAI_mean[outDF$Year==2005&outDF$PFT=="TrBE"] <- totDF1$LAI.mean
outDF$expansion_LAI_sd[outDF$Year==2005&outDF$PFT=="TrBE"] <- totDF1$LAI.sd
### C4G
pDF1 <- subset(pDF, C4G.p == "expansion")
tmpDF1 <- pDF1[,c("Lon", "Lat", "Year.y", "C4G.y")]
tmpDF2 <- pDF1[,c("Lon", "Lat", "Year.y", "C4G.p")]
colnames(tmpDF1) <- c("Lon", "Lat", "Year", "LAI")
colnames(tmpDF2) <- c("Lon", "Lat", "Year", "count")
tmpDF2$count <- ifelse(tmpDF2$count == "expansion", 1, 0)
tmpDF2$count <- as.numeric(tmpDF2$count)
totDF1 <- summaryBy(LAI~Year, data=tmpDF1, na.rm=T, keep.names=T, FUN=c(mean,sd))
outDF$expansion_LAI_n[outDF$Year==2005&outDF$PFT=="C4G"] <- sum(tmpDF2$count)
outDF$expansion_LAI_mean[outDF$Year==2005&outDF$PFT=="C4G"] <- totDF1$LAI.mean
outDF$expansion_LAI_sd[outDF$Year==2005&outDF$PFT=="C4G"] <- totDF1$LAI.sd
### C3G
pDF1 <- subset(pDF, C3G.p == "expansion")
tmpDF1 <- pDF1[,c("Lon", "Lat", "Year.y", "C3G.y")]
tmpDF2 <- pDF1[,c("Lon", "Lat", "Year.y", "C3G.p")]
colnames(tmpDF1) <- c("Lon", "Lat", "Year", "LAI")
colnames(tmpDF2) <- c("Lon", "Lat", "Year", "count")
tmpDF2$count <- ifelse(tmpDF2$count == "expansion", 1, 0)
tmpDF2$count <- as.numeric(tmpDF2$count)
totDF1 <- summaryBy(LAI~Year, data=tmpDF1, na.rm=T, keep.names=T, FUN=c(mean,sd))
outDF$expansion_LAI_n[outDF$Year==2005&outDF$PFT=="C3G"] <- sum(tmpDF2$count)
outDF$expansion_LAI_mean[outDF$Year==2005&outDF$PFT=="C3G"] <- totDF1$LAI.mean
outDF$expansion_LAI_sd[outDF$Year==2005&outDF$PFT=="C3G"] <- totDF1$LAI.sd
write.csv(outDF, "output/static/LAI_by_year_decadal.csv", row.names=F)
for (i in c(1951, 2005)) {
### TeNE
outDF$overall_LAI_mean[outDF$Year==i&outDF$PFT=="TeNE"] <- totDF1$TeNE.mean[totDF1$Year==i]
outDF$overall_LAI_sd[outDF$Year==i&outDF$PFT=="TeNE"] <- totDF1$TeNE.sd[totDF1$Year==i]
outDF$overall_LAI_n[outDF$Year==i&outDF$PFT=="TeNE"] <- totDF2$TeNE[totDF1$Year==i]
### TeBS
outDF$overall_LAI_mean[outDF$Year==i&outDF$PFT=="TeBS"] <- totDF1$TeBS.mean[totDF1$Year==i]
outDF$overall_LAI_sd[outDF$Year==i&outDF$PFT=="TeBS"] <- totDF1$TeBS.sd[totDF1$Year==i]
outDF$overall_LAI_n[outDF$Year==i&outDF$PFT=="TeBS"] <- totDF2$TeBS[totDF1$Year==i]
### IBS
outDF$overall_LAI_mean[outDF$Year==i&outDF$PFT=="IBS"] <- totDF1$IBS.mean[totDF1$Year==i]
outDF$overall_LAI_sd[outDF$Year==i&outDF$PFT=="IBS"] <- totDF1$IBS.sd[totDF1$Year==i]
outDF$overall_LAI_n[outDF$Year==i&outDF$PFT=="IBS"] <- totDF2$IBS[totDF1$Year==i]
### TeBE
outDF$overall_LAI_mean[outDF$Year==i&outDF$PFT=="TeBE"] <- totDF1$TeBE.mean[totDF1$Year==i]
outDF$overall_LAI_sd[outDF$Year==i&outDF$PFT=="TeBE"] <- totDF1$TeBE.sd[totDF1$Year==i]
outDF$overall_LAI_n[outDF$Year==i&outDF$PFT=="TeBE"] <- totDF2$TeBE[totDF1$Year==i]
### TrBE
outDF$overall_LAI_mean[outDF$Year==i&outDF$PFT=="TrBE"] <- totDF1$TrBE.mean[totDF1$Year==i]
outDF$overall_LAI_sd[outDF$Year==i&outDF$PFT=="TrBE"] <- totDF1$TrBE.sd[totDF1$Year==i]
outDF$overall_LAI_n[outDF$Year==i&outDF$PFT=="TrBE"] <- totDF2$TrBE[totDF1$Year==i]
### TrIBE
outDF$overall_LAI_mean[outDF$Year==i&outDF$PFT=="TrIBE"] <- totDF1$TrIBE.mean[totDF1$Year==i]
outDF$overall_LAI_sd[outDF$Year==i&outDF$PFT=="TrIBE"] <- totDF1$TrIBE.sd[totDF1$Year==i]
outDF$overall_LAI_n[outDF$Year==i&outDF$PFT=="TrIBE"] <- totDF2$TrIBE[totDF1$Year==i]
### TrBR
outDF$overall_LAI_mean[outDF$Year==i&outDF$PFT=="TrBR"] <- totDF1$TrBR.mean[totDF1$Year==i]
outDF$overall_LAI_sd[outDF$Year==i&outDF$PFT=="TrBR"] <- totDF1$TrBR.sd[totDF1$Year==i]
outDF$overall_LAI_n[outDF$Year==i&outDF$PFT=="TrBR"] <- totDF2$TrBR[totDF1$Year==i]
### C3G
outDF$overall_LAI_mean[outDF$Year==i&outDF$PFT=="C3G"] <- totDF1$C3G.mean[totDF1$Year==i]
outDF$overall_LAI_sd[outDF$Year==i&outDF$PFT=="C3G"] <- totDF1$C3G.sd[totDF1$Year==i]
outDF$overall_LAI_n[outDF$Year==i&outDF$PFT=="C3G"] <- totDF2$C3G[totDF1$Year==i]
### C4G
outDF$overall_LAI_mean[outDF$Year==i&outDF$PFT=="C4G"] <- totDF1$C4G.mean[totDF1$Year==i]
outDF$overall_LAI_sd[outDF$Year==i&outDF$PFT=="C4G"] <- totDF1$C4G.sd[totDF1$Year==i]
outDF$overall_LAI_n[outDF$Year==i&outDF$PFT=="C4G"] <- totDF2$C4G[totDF1$Year==i]
### Total
outDF$overall_LAI_mean[outDF$Year==i&outDF$PFT=="Total"] <- totDF1$Total.mean[totDF1$Year==i]
outDF$overall_LAI_sd[outDF$Year==i&outDF$PFT=="Total"] <- totDF1$Total.sd[totDF1$Year==i]
outDF$overall_LAI_n[outDF$Year==i&outDF$PFT=="Total"] <- totDF2$Total[totDF1$Year==i]
}
View(outDF)
View(outDF)
### only presence for each species
##TeNE
pDF1 <- subset(pDF, TeNE.p == "expansion")
tmpDF1 <- pDF1[,c("Lon", "Lat", "Year.y", "TeNE.y")]
tmpDF2 <- pDF1[,c("Lon", "Lat", "Year.y", "TeNE.p")]
colnames(tmpDF1) <- c("Lon", "Lat", "Year", "LAI")
colnames(tmpDF2) <- c("Lon", "Lat", "Year", "count")
tmpDF2$count <- ifelse(tmpDF2$count == "expansion", 1, 0)
tmpDF2$count <- as.numeric(tmpDF2$count)
totDF1 <- summaryBy(LAI~Year, data=tmpDF1, na.rm=T, keep.names=T, FUN=c(mean,sd))
outDF$expansion_LAI_n[outDF$Year==2005&outDF$PFT=="TeNE"] <- sum(tmpDF2$count)
outDF$expansion_LAI_mean[outDF$Year==2005&outDF$PFT=="TeNE"] <- totDF1$LAI.mean
outDF$expansion_LAI_sd[outDF$Year==2005&outDF$PFT=="TeNE"] <- totDF1$LAI.sd
setwd('/Users/30060406/Results/LPJ-GUESS/CFA/HistoricalNARCLIM_GenericPFT/')
rm(list=ls())
library(doBy)
myDF <- read.table('lai.out', header = T)
View(myDF)
View(myDF)
### Investigate distributions over space
spDF <- myDF
### convert 0 to NA
spDF[spDF == 0] <- NA
View(spDF)
View(spDF)
### convert all LAI < 0.1 to 0.1
tDF <- spDF[,4:16]
tDF[tDF <= 0.1] <- 0.1
spDF[, 4:16] <- tDF
## set lim of color in log scale
min.lim <- log(0.1)
max.lim <- log(max(spDF$Total, na.rm=T))
max.lim
min.lim
## set lim of color in log scale
min.lim <- log(0.1)
max.lim <- log(max(spDF$Total, na.rm=T))
subDF <- spDF[spDF$Year%in%c(1951,2005),]
subDF$Lon <- NULL
subDF$Lat <- NULL
View(subDF)
View(subDF)
subDF
subDF
subDF <- spDF[spDF$Year%in%c(1951,2005),]
subDF$Lon <- NULL
subDF$Lat <- NULL
sumDF <- summaryBy(.~Year, FUN=c(mean, sd), data=subDF,
na.rm=T, keep.names=T)
write.csv(sumDF, "mean_LAI_by_year_PFT.csv", row.names=F)
View(subDF)
outDF <- data.frame("Year"=rep(c(1905.5, 2005), each=10),
"PFT"=rep(c("TeNE", "TeBS", "IBS", "TeBE",
"TrBE", "TrIBE", "TrBR", "C3G", "C4G",
"Total"), 2),
"overall_LAI_mean" = NA,
"overall_LAI_sd" = NA,
"overall_LAI_n" = NA,
"expansion_LAI_mean" = NA,
"expansion_LAI_sd" = NA,
"expansion_LAI_n" = NA)
View(outDF)
View(outDF)
View(outDF)
### look at expansion and change in LAI
subDF1 <- spDF[spDF$Year%in%c(1951:1956),]
subDF2 <- spDF[spDF$Year%in%c(2000:2005),]
sumDF1 <- summaryBy(.~Lon+Lat, FUN=mean, na.rm=T, keep.names=T, data=subDF1)
sumDF2 <- summaryBy(.~Lon+Lat, FUN=mean, na.rm=T, keep.names=T, data=subDF2)
### merge the two
pDF <- merge(sumDF1, sumDF2, by=c("Lon", "Lat"), all=T)
View(pDF)
# prepare a dataframe of only 2005
newDF <- myDF[myDF$Year==2005]
# prepare a dataframe of only 2005
newDF <- myDF[myDF$Year=2005]
# prepare a dataframe of only 2005
newDF <- myDF[myDF$Year==2005]
# prepare a dataframe of only 2005
newDF <- myDF[myDF$Year==2005,]
setwd('/Users/30060406/Results/LPJ-GUESS/CFA/HistoricalNARCLIM_GenericPFT/')
rm(list=ls())
library(doBy)
myDF <- read.table('lai.out', header = T)
# prepare a dataframe of only 2005
newDF <- myDF[myDF$Year==2005,]
View(myDF)
View(myDF)
View(newDF)
View(newDF)
library(raster)
View(newDF)
View(newDF)
TeBE <- myDF[,1]
TeBE <- myDF[,1:4]
View(TeBE)
View(TeBE)
TeBE <- myDF[,1:3,10]
View(TeBE)
View(TeBE)
View(newDF)
View(newDF)
TeBE <- myDF[,c("Lon","Lat","TeBE")]
View(TeBE)
View(TeBE)
# plot
dfr <- rasterFromXYZ(TeBE)
plot(dfr)
View(newDF)
View(newDF)
# convert to raster using latitude and logitude
TeBE <- myDF[,c("Lon","Lat","TeBE")]
TrBE <- myDF[,c("Lon","Lat","TrBE")]
TeNE <- myDF[,c("Lon","Lat","TeNE")]
C3G <- myDF[,c("Lon","Lat","C3G")]
C4G <- myDF[,c("Lon","Lat","C4G")]
TeBE <- myDF[,c("Lon","Lat","TeBE")]
setwd('/Users/30060406/Results/LPJ-GUESS/CFA/HistoricalNARCLIM_GenericPFT/')
rm(list=ls())
library(raster)
# load lai data
myDF <- read.table('lai.out', header = T)
# prepare a dataframe of only 2005
newDF <- myDF[myDF$Year==2005,]
# convert to raster using latitude and logitude
TeBE <- myDF[,c("Lon","Lat","TeBE")]
TrBE <- myDF[,c("Lon","Lat","TrBE")]
TeNE <- myDF[,c("Lon","Lat","TeNE")]
C3G <- myDF[,c("Lon","Lat","C3G")]
C4G <- myDF[,c("Lon","Lat","C4G")]
# plot
rasTeBE <- rasterFromXYZ(TeBE)
rasTrBE <- rasterFromXYZ(TrBE)
rasTeNE <- rasterFromXYZ(TeNE)
rasC3G <- rasterFromXYZ(C3G)
rasC4G <- rasterFromXYZ(C4G)
plot(rasTeBE)
plot(rasTrBE)
plot(rasC4G)
plot(rasC3G)
plot(rasTeNE)
plot(TeBE)
plot(TeBE)
# plot
rasTeBE <- rasterFromXYZ(TeBE)
rasTrBE <- rasterFromXYZ(TrBE)
rasTeNE <- rasterFromXYZ(TeNE)
rasC3G <- rasterFromXYZ(C3G)
rasC4G <- rasterFromXYZ(C4G)
plot(TeBE)
plot(TeBE)
plot(rasTeBE)
max(myDF)
max(myDF$Lon)
min(myDF$Lon)
max(myDF$Lat)
min(myDF$Lat)
a <- read.table('LPJ_soilparams_fixed.dat')
View(a)
View(a)
min(a$V1)
max(a$V1)
a <- read.table('LPJ_soilparams_fixed.dat', header = TRUE)
max(a$V1)
max(a$lon)
max(a$lat)
min(a$lat)
library(raster)
setwd('/Volumes/Expansion/Gridded_3arcsec_Soil_Vars_4_LPJ_GUESS/Clay')
ras <- raster("CLY_100_200_EV_N_P_AU_NAT_C_20140801.tif")
plot(ras)
1/0.002
1/0.003
1/0.005
ggplot(Austallo ,aes(x=(stem_diameter_cm), y=(height_m))) +
geom_point()+
facet_wrap(family ~ ., scales="free")
rm(list = ls())
library(dplyr)
library(base)
library(stats)
library(ggplot2)
library(tidyverse)
library(hrbrthemes)
setwd("/Users/30060406/Dropbox/R_CODE/HIE/PFT/allom")
# finds the coefficient of a fitted power function and puts them (along with other variables)
# in a new dataframe
df_power_coefficients <- function(input_df) {
# names of pfts in input_df
pftnames<-unique(input_df$pft)
# number of pfts in input_df
numpfts<-length(unique(input_df$pft))
cutoff<- .9
# define the new dataframe
output_df <- data.frame(matrix(NA, nrow = numpfts, ncol = 7))
colnames(output_df)<-c("pft", "numspecies","maxdbh","maxheight","base","power","r_sqr")
max_stem_diameter_cm<-0
max_height_m<-0
numspeciesVec <- 0
for (ii in 1:numpfts){
# save the maxmun DBH and height
max_stem_diameter_cm[ii]<-max(subset(input_df,pft==unique(input_df$pft)[ii])$stem_diameter_cm)
max_height_m[ii]<-max(subset(input_df,pft==unique(input_df$pft)[ii])$height_m)
# X vector (DBH,cm)
X<-subset(input_df,pft==unique(input_df$pft)[ii])$stem_diameter_cm
# Y Vvector (hright,m)
Y<-subset(input_df,pft==unique(input_df$pft)[ii])$height_m
powerpft = lm(log(Y) ~ log(X))
# print(paste0('maxdbh= ',max(subset(input_df,pft==unique(input_df$pft)[ii])$stem_diameter_cm))) # debug
# print(paste0('maxheight= ',max(subset(input_df,pft==unique(input_df$pft)[ii])$height_m))) # debug
output_df$pft[ii]<-pftnames[ii]
output_df$numspecies[ii]<-length(unique(subset(input_df,pft==pftnames[ii])$species))
output_df$base[ii]<-exp(powerpft$coefficients[1]) # exp(Intercept)
output_df$power[ii]<-powerpft$coefficients[2]
output_df$r_sqr[ii]<-summary(powerpft)$r.squared
# print(output_df[1,])
}
# save maximum DBH and height vectors into appropriate place in the output_df dataframe
output_df$maxdbh<-max_stem_diameter_cm
output_df$maxheight<-max_height_m
return(output_df)
}
create_DBH_height_vectors_from_coefficients_for_plotting <-function(input_df, max_DBH){
# names of pfts in input_df
pftnames<-unique(input_df$pft)
# number of pfts in input_df
numpfts<-length(pftnames)
# define the X axis (DBH range)
DBH<-seq(0, max_DBH)
# define the doutput_df
output_df <- data.frame(matrix(NA, nrow = numpfts*length(DBH), ncol = 3))
colnames(output_df)<-c("pred_stem_diamter_cm", "pred_height_m","pft")
# pointer to the dataframe location
pointer<-1
for (iii in 1:numpfts){
# # define temporary dataframe
# temp_height_pred <- data.frame(matrix(NA, nrow = length(DBH), ncol = 3))
# colnames(temp_height_pred)<-c("pred_stem_diamter_cm", "pred_height_m","pft")
# start calculating the predicted tree height
Base<-input_df$base[iii] # from the input dataframe for  pft (iii)
Power<-input_df$power[iii] # from the input dataframe for  pft (iii)
for (i in 1:length(DBH)){
output_df$pft[pointer+i-1]<-pftnames[iii]
output_df$pred_stem_diamter_cm[pointer+i-1]<-DBH[i]
output_df$pred_height_m[pointer+i-1]<-Base*(DBH[i]^Power)
}
pointer<-pointer+length(DBH)
rm(Base)
rm(Power)
}
return(output_df)
}
Austallo <- read.csv("/Users/30060406/Dropbox/R_CODE/HIE/PFT/allom/Aus-Tallodf.csv")
# limit to below 2m DBH
Austallo_lim200 <- subset(Austallo,stem_diameter_cm <= 200)
# split dataframe according to PFT and set the name of the dataframe according to the PFT
PFTdata<-split(Austallo, Austallo$pft)
pftnames <-unique(Austallo$pft)
specieslist <- unique(Austallo$species) # create species list
numspeciesVec <- rep(0,length(pftnames))
numspecies <- sum(numspeciesVec)
# find number of shortlisted species per PFT
for (i in 1:length(pftnames)) {
temppftname<-pftnames[i]
numspecies[i]<-length(unique(Austallo$species[Austallo$pft==temppftname]))
}
# CREATE df WITH COEFFICIENTS OF THE POWER LAW PER SPECIES AND PFT
species_coeff_df <- data.frame(species=specieslist,
pft=NA,
numberobserv=NA,
base=NA,
power=NA,
r_sqr=NA)
# minimum number of datapoints belowhich species is ignored
minimum_datapoints <- 20
for (j in 1:sum(numspecies)){
# fill the $pft column
speciestemp<-subset(Austallo, species==species_coeff_df$species[j])
species_coeff_df$numberobserv[j]<-dim(speciestemp)[1]
# fill details only if there is a minimum umber of data points to form a curve
if (dim(speciestemp)[1]>minimum_datapoints){
species_coeff_df$pft[j]<-speciestemp$pft[1]
## Fill coefficients of a power function
y<-speciestemp$height_m
x<-speciestemp$stem_diameter_cm
powerspecies = lm(log(y) ~ log(x))
species_coeff_df$base[j]<-exp(powerspecies$coefficients[1]) # exp(Intercept)
species_coeff_df$power[j]<-powerspecies$coefficients[2]
species_coeff_df$r_sqr[j]<-summary(powerspecies)$r.squared
}
}
# get rid of lines with NA
species_coeff_noNA<-na.omit(species_coeff_df)
num_species_removed<-dim(species_coeff_df)[1]-dim(species_coeff_noNA)[1]
species_coeff_df<-species_coeff_noNA
###################################### K_allom2 and K_allom3
# Find paremters (coefficients) for the power function per PFT
pft_coeff_df <- df_power_coefficients(Austallo)
height_predicted<-create_DBH_height_vectors_from_coefficients_for_plotting (pft_coeff_df, 200)
cool_rainforest_tree<-subset(Austallo,(pft==pftnames[1]))
floodplain_sclerophyll<-subset(Austallo,(pft==pftnames[2]))
med_sclerophyll_resprout<-subset(Austallo,(pft==pftnames[3]))
med_sclerophyll_seed<-subset(Austallo,(pft==pftnames[4]))
mesic_shrub<-subset(Austallo,(pft==pftnames[5]))
Nfix_mesic_midstory<-subset(Austallo,(pft==pftnames[6]))
Nfix_mod_rain<-subset(Austallo,(pft==pftnames[7]))
Nfix_xeric<-subset(Austallo,(pft==pftnames[8]))
savanna_tree<-subset(Austallo,(pft==pftnames[9]))
short_sclerophyll_resprout<-subset(Austallo,(pft==pftnames[10]))
short_sclerophyll_seed<-subset(Austallo,(pft==pftnames[11]))
subalpine_tree<-subset(Austallo,(pft==pftnames[12]))
tall_sclerophyll_resprout<-subset(Austallo,(pft==pftnames[13]))
tall_sclerophyll_seed<-subset(Austallo,(pft==pftnames[14]))
warm_rainforest_tree<-subset(Austallo,(pft==pftnames[15]))
xeric_shrub<-subset(Austallo,(pft==pftnames[16]))
xeric_shrub_Nfix<-subset(Austallo,(pft==pftnames[17]))
h_cool_rainforest_tree<-subset(height_predicted,(pft==pftnames[1]))
h_floodplain_sclerophyll<-subset(height_predicted,(pft==pftnames[2]))
h_med_sclerophyll_resprout<-subset(height_predicted,(pft==pftnames[3]))
h_med_sclerophyll_seed<-subset(height_predicted,(pft==pftnames[4]))
h_mesic_shrub<-subset(height_predicted,(pft==pftnames[5]))
h_Nfix_mesic_midstory<-subset(height_predicted,(pft==pftnames[6]))
h_Nfix_mod_rain<-subset(height_predicted,(pft==pftnames[7]))
h_Nfix_xeric<-subset(height_predicted,(pft==pftnames[8]))
h_savanna_tree<-subset(height_predicted,(pft==pftnames[9]))
h_short_sclerophyll_resprout<-subset(height_predicted,(pft==pftnames[10]))
h_short_sclerophyll_seed<-subset(height_predicted,(pft==pftnames[11]))
h_subalpine_tree<-subset(height_predicted,(pft==pftnames[12]))
h_tall_sclerophyll_resprout<-subset(height_predicted,(pft==pftnames[13]))
h_tall_sclerophyll_seed<-subset(height_predicted,(pft==pftnames[14]))
h_warm_rainforest_tree<-subset(height_predicted,(pft==pftnames[15]))
h_xeric_shrub<-subset(height_predicted,(pft==pftnames[16]))
h_xeric_shrub_Nfix<-subset(height_predicted,(pft==pftnames[17]))
# combine the sclerophylls together
sclerophyll_coeff<-rbind(h_tall_sclerophyll_resprout,h_med_sclerophyll_resprout,h_short_sclerophyll_resprout,
h_tall_sclerophyll_seed,h_med_sclerophyll_seed,h_short_sclerophyll_seed)
sclerophyll_Austallo<-rbind(tall_sclerophyll_resprout, med_sclerophyll_resprout, short_sclerophyll_resprout,
tall_sclerophyll_seed, med_sclerophyll_seed, short_sclerophyll_seed)
# create a df that splits all sclerophyll pfts to "short", "med"  and "tall"
sclerophyll_data<-rbind(tall_sclerophyll_resprout,med_sclerophyll_resprout,short_sclerophyll_resprout,
tall_sclerophyll_seed,med_sclerophyll_seed,short_sclerophyll_seed)
sclerophyll_data[sclerophyll_data == "tall_sclerophyll_resprout"] <- "tall_sclerophyll"
sclerophyll_data[sclerophyll_data == "tall_sclerophyll_seed"] <- "tall_sclerophyll"
sclerophyll_data[sclerophyll_data == "med_sclerophyll_resprout"] <- "med_sclerophyll"
sclerophyll_data[sclerophyll_data == "med_sclerophyll_seed"] <- "med_sclerophyll"
sclerophyll_data[sclerophyll_data == "short_sclerophyll_resprout"] <- "short_sclerophyll"
sclerophyll_data[sclerophyll_data == "short_sclerophyll_seed"] <- "short_sclerophyll"
sclerophyll_coeff_df <- df_power_coefficients(sclerophyll_data)
sclerophyll_plot_df <- create_DBH_height_vectors_from_coefficients_for_plotting(sclerophyll_coeff_df,200)
### PLOT
# pots all the data faceted by PFT
ggplot(Austallo ,aes(x=log(stem_diameter_cm), y=log(height_m))) +
geom_point()+
facet_wrap(pft ~ .)+
stat_smooth(method = "lm", formula = y ~ x , size = 1)
ggplot(Austallo ,aes(x=(stem_diameter_cm), y=(height_m))) +
geom_point()+
facet_wrap(pft ~ ., scales="free")
ggplot(Austallo ,aes(x=(stem_diameter_cm), y=(height_m))) +
geom_point()+
facet_wrap(family ~ ., scales="free")
# find how many data points per family
length(unique(Austallo$family))
# find how many data points per family
familynames<-unique(Austallo$family)
familynames
Family_info <- data.frame(name=familynames)
Family_info
Family_info <- data.frame(name=familynames, datarange=NA)
Family_info
# find how many data points per family
familynames<-unique(Austallo$family)
Family_info <- data.frame(name=familynames, datarange=NA)
for (i in 1:length(familinames)) {
Family_info$datarange[i]<-length(unique(Austallo$stem_diameter_cm[Austallo$family==familynames[i]]))
}
# find how many data points per family
familynames<-unique(Austallo$family)
Family_info <- data.frame(name=familynames, datarange=NA)
for (i in 1:length(familinames)) {
Family_info$datarange[i]<-length(unique(Austallo$stem_diameter_cm[Austallo$family==familynames[i]]))
}
# find how many data points per family
familynames<-unique(Austallo$family)
Family_info <- data.frame(name=familynames, datarange=NA)
for (i in 1:length(familynames)) {
Family_info$datarange[i]<-length(unique(Austallo$stem_diameter_cm[Austallo$family==familynames[i]]))
}
Family_info
